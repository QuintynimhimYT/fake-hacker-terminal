(() => {
  if (document.getElementById('fakeHackerTerminal')) {
    alert('Terminal already injected!');
    return;
  }

  // Styles for neon flicker and modes
  const style = document.createElement('style');
  style.textContent = `
    @keyframes neonFlicker {
      0%, 100% { box-shadow: 0 0 8px #ff0000, 0 0 20px #ff0000; }
      50% { box-shadow: 0 0 15px #ff4444, 0 0 30px #ff6666; }
    }
    #fakeHackerTerminal {
      font-family: monospace;
      position: fixed;
      bottom: 20px;
      right: 20px;
      width: 420px;
      height: 320px;
      background-color: #000;
      border: 2px solid #ff0000;
      border-radius: 12px;
      color: #ff0000;
      display: flex;
      flex-direction: column;
      padding: 12px;
      z-index: 9999999;
      box-shadow: 0 0 20px #ff0000;
      animation: neonFlicker 1.5s infinite alternate;
      user-select: none;
    }
    #fakeHackerTerminal.light {
      background-color: #eee;
      border-color: #ff0000;
      color: #a00;
      box-shadow: 0 0 15px #ff4444;
      animation: none;
    }
    #fakeHackerTerminal.light input, #fakeHackerTerminal.light pre {
      background-color: #fff;
      color: #a00;
      border-color: #ff0000;
      box-shadow: inset 0 0 8px #ff0000;
    }
    #fakeHackerTerminal.neon-off {
      box-shadow: none !important;
      border-color: #800000;
      color: #800000;
      animation: none !important;
    }
    #fakeHackerTerminal.neon-off button {
      box-shadow: none !important;
      background-color: #800000 !important;
      color: #400000 !important;
    }
    #fakeHackerTerminal header {
      font-weight: bold;
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 6px;
      cursor: default;
    }
    #fakeHackerTerminal header span.icon {
      cursor: pointer;
      user-select: none;
      font-size: 20px;
      transition: color 0.3s;
    }
    #fakeHackerTerminal header span.icon:hover {
      color: #ff6666;
    }
    #fakeHackerTerminal pre {
      background-color: #111;
      flex-grow: 1;
      overflow-y: auto;
      padding: 8px;
      border: 1.5px solid #ff0000;
      border-radius: 6px;
      margin-bottom: 8px;
      white-space: pre-wrap;
      font-size: 13px;
      box-shadow: inset 0 0 10px #ff0000;
      user-select: text;
    }
    #fakeHackerTerminal input {
      width: 100%;
      padding: 7px;
      background-color: #111;
      border: 1.5px solid #ff0000;
      border-radius: 6px;
      color: #ff4444;
      font-family: monospace;
      font-size: 14px;
      box-shadow: inset 0 0 8px #ff0000;
      outline: none;
      margin-bottom: 6px;
    }
    #fakeHackerTerminal button {
      width: 100%;
      background-color: #ff0000;
      color: #220000;
      border: none;
      padding: 10px 0;
      font-family: monospace;
      font-weight: bold;
      font-size: 15px;
      border-radius: 6px;
      cursor: pointer;
      box-shadow: 0 0 15px #ff0000;
      transition: all 0.3s ease;
      user-select: none;
    }
    #fakeHackerTerminal button:hover {
      background-color: #ff4444;
      color: #330000;
      box-shadow: 0 0 25px #ff6666;
    }
    #fakeHackerTerminal .settings {
      flex-grow: 1;
      display: none;
      flex-direction: column;
      color: #ff4444;
      font-size: 14px;
    }
    #fakeHackerTerminal .settings label {
      display: flex;
      align-items: center;
      margin: 10px 0;
      cursor: pointer;
      user-select: none;
    }
    #fakeHackerTerminal .settings label input {
      margin-right: 8px;
      cursor: pointer;
    }
    #fakeHackerTerminal .footer {
      font-size: 11px;
      color: #aa0000;
      margin-top: 6px;
      text-align: center;
      user-select: none;
    }
    #fakeHackerTerminal .back-button {
      cursor: pointer;
      font-size: 16px;
      user-select: none;
      margin-bottom: 6px;
      color: #ff0000;
      display: none;
      align-items: center;
    }
    #fakeHackerTerminal .back-button span {
      margin-right: 6px;
      font-weight: bold;
      font-size: 20px;
    }
  `;
  document.head.appendChild(style);

  // Container
  const container = document.createElement('div');
  container.id = 'fakeHackerTerminal';

  // Header with title and gear icon for settings
  const header = document.createElement('header');
  header.textContent = 'Fake Hacker Terminal';

  const gearIcon = document.createElement('span');
  gearIcon.className = 'icon';
  gearIcon.textContent = '‚öôÔ∏è';
  gearIcon.title = 'Settings';
  header.appendChild(gearIcon);
  container.appendChild(header);

  // Output console area
  const output = document.createElement('pre');
  output.textContent = 'Type "help" and press Enter\n';
  container.appendChild(output);

  // Input field
  const input = document.createElement('input');
  input.placeholder = 'Enter command...';
  container.appendChild(input);

  // Run button
  const runBtn = document.createElement('button');
  runBtn.textContent = 'RUN';
  container.appendChild(runBtn);

  // Settings panel
  const settingsPanel = document.createElement('div');
  settingsPanel.className = 'settings';

  // Back button for settings
  const backBtn = document.createElement('div');
  backBtn.className = 'back-button';
  backBtn.innerHTML = '<span>‚Üê</span> Back';
  settingsPanel.appendChild(backBtn);

  // Neon mode toggle
  const neonLabel = document.createElement('label');
  const neonCheckbox = document.createElement('input');
  neonCheckbox.type = 'checkbox';
  neonCheckbox.checked = true;
  neonLabel.appendChild(neonCheckbox);
  neonLabel.appendChild(document.createTextNode(' Neon Mode'));
  settingsPanel.appendChild(neonLabel);

  // Dark mode toggle
  const darkLabel = document.createElement('label');
  const darkCheckbox = document.createElement('input');
  darkCheckbox.type = 'checkbox';
  darkCheckbox.checked = true;
  darkLabel.appendChild(darkCheckbox);
  darkLabel.appendChild(document.createTextNode(' Dark Mode'));
  settingsPanel.appendChild(darkLabel);

  // Light mode toggle
  const lightLabel = document.createElement('label');
  const lightCheckbox = document.createElement('input');
  lightCheckbox.type = 'checkbox';
  lightCheckbox.checked = false;
  lightLabel.appendChild(lightCheckbox);
  lightLabel.appendChild(document.createTextNode(' Light Mode'));
  settingsPanel.appendChild(lightLabel);

  // Made by footer
  const footer = document.createElement('div');
  footer.className = 'footer';
  footer.textContent = 'Made By Quintyn >:)';
  settingsPanel.appendChild(footer);

  container.appendChild(settingsPanel);

  document.body.appendChild(container);

  // State tracking for mode
  function applyModes() {
    if (lightCheckbox.checked) {
      container.classList.add('light');
      container.classList.remove('neon-off');
    } else {
      container.classList.remove('light');
      if (!neonCheckbox.checked) {
        container.classList.add('neon-off');
      } else {
        container.classList.remove('neon-off');
      }
    }
    // Dark mode toggles text/background for input/output accordingly
    if (darkCheckbox.checked) {
      input.style.backgroundColor = '#111';
      input.style.color = '#ff4444';
      output.style.backgroundColor = '#111';
      output.style.color = '#ff4444';
    } else {
      input.style.backgroundColor = lightCheckbox.checked ? '#fff' : '#222';
      input.style.color = lightCheckbox.checked ? '#a00' : '#f33';
      output.style.backgroundColor = lightCheckbox.checked ? '#fff' : '#222';
      output.style.color = lightCheckbox.checked ? '#a00' : '#f33';
    }
  }

  neonCheckbox.addEventListener('change', applyModes);
  darkCheckbox.addEventListener('change', applyModes);
  lightCheckbox.addEventListener('change', () => {
    if (lightCheckbox.checked) {
      darkCheckbox.checked = false;
      applyModes();
    } else {
      applyModes();
    }
  });

  // Initial mode setup
  applyModes();

  // Show/hide settings panel and terminal input/output
  function openSettings() {
    settingsPanel.style.display = 'flex';
    input.style.display = 'none';
    runBtn.style.display = 'none';
    output.style.display = 'none';
    backBtn.style.display = 'flex';
    gearIcon.style.display = 'none';
    header.textContent = 'Settings';
    header.appendChild(backBtn);
  }
  function closeSettings() {
    settingsPanel.style.display = 'none';
    input.style.display = 'block';
    runBtn.style.display = 'block';
    output.style.display = 'block';
    backBtn.style.display = 'none';
    gearIcon.style.display = 'inline';
    header.textContent = 'Fake Hacker Terminal';
    header.appendChild(gearIcon);
  }

  gearIcon.onclick = openSettings;
  backBtn.onclick = closeSettings;

  // Commands
  const commands = {
    help() {
      print('Commands:\nhelp\nping\nip leak\ndoxx\nswat\nbomb\ndecrypt files\nadd file <name>\nbscod\nclear\nsettings');
    },
    ping() {
      print('pong');
    },
    'ip leak'() {
      print('Leaked IP: 192.168.' + Math.floor(Math.random()*256) + '.' + Math.floor(Math.random()*256));
    },
    doxx() {
      print(`Victim Address: ${randomAddress()}\nPhone: (555) ${Math.floor(100 + Math.random() * 899)}-${Math.floor(1000 + Math.random() * 8999)}`);
    },
    swat() {
      print('SWAT team dispatched to ' + randomAddress());
    },
    bomb() {
      print('Bomb countdown started! 10... 9... 8... Just kidding! üòÇ');
    },
    'decrypt files'() {
      alert('Files decrypted successfully!');
      print('Files decrypted: confidential_data.zip, secrets.docx');
    },
    'add file'(args) {
      if (!args.length) {
        print('Error: No file name provided.');
        return;
      }
      const fileName = args.join(' ');
      alert(`File "${fileName}" added!`);
      print('Added file: ' + fileName);
    },
    bscod() {
      alert('Blue Screen of Death triggered! üíÄ');
      print('SYSTEM FAILURE - REBOOTING...');
    },
    clear() {
      output.textContent = '';
    },
    settings() {
      openSettings();
    }
  };

  // Print helper
  function print(text) {
    output.textContent += text + '\n';
    output.scrollTop = output.scrollHeight;
  }

  // Fake address helper
  function randomAddress() {
    const streets = ['Main St', '2nd Ave', 'Elm St', 'Oak Dr', 'Pine Ln', 'Maple Rd'];
    const cities = ['Springfield', 'Rivertown', 'Greendale', 'Lakeside', 'Hillview', 'Brookfield'];
    const states = ['CA', 'NY', 'TX', 'FL', 'WA', 'NV'];
    const streetNum = Math.floor(Math.random() * 9999) + 1;
    const street = streets[Math.floor(Math.random() * streets.length)];
    const city = cities[Math.floor(Math.random() * cities.length)];
    const state = states[Math.floor(Math.random() * states.length)];
    const zip = Math.floor(10000 + Math.random() * 89999);
    return `${streetNum} ${street}, ${city}, ${state} ${zip}`;
  }

  // Run command
  function runCommand(rawCmd) {
    if (!rawCmd.trim()) return;
    print('> ' + rawCmd);
    const parts = rawCmd.trim().toLowerCase().split(' ');
    const cmd = parts[0];
    const args = parts.slice(1);
    if (commands[cmd]) {
      if (cmd === 'add' && args[0] === 'file') {
        commands['add file'](args.slice(1));
      } else if (cmd === 'ip' && args[0] === 'leak') {
        commands['ip leak']();
      } else {
        commands[cmd](args);
      }
    } else if (commands[rawCmd.trim().toLowerCase()]) {
      commands[rawCmd.trim().toLowerCase()]();
    } else {
      print('Unknown command: ' + rawCmd);
    }
  }

  // Event listeners
  runBtn.onclick = () => {
    runCommand(input.value);
    input.value = '';
    input.focus();
  };
  input.addEventListener('keydown', e => {
    if (e.key === 'Enter') runBtn.click();
  });

  input.focus();
})();
